{"/home/travis/build/npmtest/node-npmtest-cnpm/test.js":"/* istanbul instrument in package npmtest_cnpm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cnpm/lib.npmtest_cnpm.js":"/* istanbul instrument in package npmtest_cnpm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cnpm = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cnpm = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cnpm/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cnpm && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cnpm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cnpm\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cnpm.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cnpm.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cnpm.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cnpm.__dirname + '/lib.npmtest_cnpm.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cnpm/node_modules/cnpm/bin/cnpm":"#!/usr/bin/env node\n\n'use strict';\n\nconst debug = require('debug')('cnpm');\nconst pkg = require('../package.json');\nconst argv = require('../parse_argv')();\n\nconst action = argv.args[0];\n\nconst extendsMethd = {\n  web: 1,\n  check: 1,\n  doc: 1,\n  sync: 1,\n  user: 1,\n  search: 1,\n};\n\ndebug('cnpm %s', action);\n\nif (extendsMethd[action]) {\n  return require('./cnpm-' + action);\n}\n\ndebug('origin npm with origin registry: $ npm %s', action);\nrequire('../origin_npm.js');\n","/home/travis/build/npmtest/node-npmtest-cnpm/node_modules/cnpm/config.js":"'use strict';\n\nvar debug = require('debug')('cnpm:config');\nvar path = require('path');\nvar fs = require('fs');\nvar cp = require('child_process');\n\nvar root;\nif (process.platform === 'win32') {\n  root = process.env.USERPROFILE || process.env.APPDATA || process.env.TMP || process.env.TEMP;\n} else {\n  root = process.env.HOME || process.env.TMPDIR || '/tmp';\n}\n\nvar prefix = null;\ntry {\n  prefix = cp.execSync('npm config get prefix').toString().trim();\n} catch (err) {\n  // ignore it\n  debug('npm config cli error: %s', err);\n}\n\nmodule.exports = {\n  cnpmHost: 'https://npm.taobao.org',\n  cnpmRegistry: 'https://registry.npm.taobao.org',\n  disturl: 'https://npm.taobao.org/mirrors/node', // download dist tarball for node-gyp\n  iojsDisturl: 'https://npm.taobao.org/mirrors/iojs',\n  cache: path.join(root, '.cnpm'),  //cache folder name\n  userconfig: path.join(root, '.cnpmrc'),\n  proxy: '',\n  prefix: prefix,\n};\n","/home/travis/build/npmtest/node-npmtest-cnpm/node_modules/cnpm/help.js":"'use strict';\n\nconst config = require('./config');\n\nmodule.exports = function outputHelp(argv) {\n  var helpInfo = 'Usage: cnpm [option] <command>\\n' +\n  'Help: http://cnpmjs.org/help/cnpm\\n\\n' +\n  '  Extend command\\n' +\n  '    web                            open cnpm web (ex.: cnpm web)\\n' +\n  '    check [ingoreupdate]           check project dependencies, add ignoreupdate will not check modules\\' latest version(ex.: cnpm check, cnpm check -i)\\n' +\n  '    doc [moduleName]               open document page (ex.: cnpm doc urllib)\\n' +\n  '    sync [moduleName]              sync module from source npm (ex.: cnpm sync urllib)\\n' +\n  '    user [username]                open user profile page (ex.: cnpm user fengmk2)\\n' +\n  '\\n' +\n  '  npm command use --registry=' + (argv.registry || config.cnpmRegistry) + '\\n' +\n  '    where <command> is one of:\\n' +\n  '    add-user, adduser, apihelp, author, bin, bugs, c, cache,\\n' +\n  '    completion, config, ddp, dedupe, deprecate, docs, edit,\\n' +\n  '    explore, faq, find, find-dupes, get, help, help-search,\\n' +\n  '    home, i, info, init, install, isntall, la, link, list, ll,\\n' +\n  '    ln, login, ls, outdated, owner, pack, prefix, prune,\\n' +\n  '    publish, r, rb, rebuild, remove, restart, rm, root,\\n' +\n  '    run-script, s, se, search, set, show, shrinkwrap, star,\\n' +\n  '    start, stop, submodule, tag, test, tst, un, uninstall,\\n' +\n  '    unlink, unpublish, unstar, up, update, v, version, view,\\n' +\n  '    whoami\\n' +\n\n  '      npm <cmd> -h     quick help on <cmd>\\n' +\n  '      npm -l           display full usage info\\n' +\n  '      npm faq          commonly asked questions\\n' +\n  '      npm help <term>  search for help on <term>\\n' +\n  '      npm help npm     involved overview\\n\\n' +\n\n  '      Specify configs in the ini-formatted file:\\n' +\n  '          ' + (argv.userconfig || config.userconfig) + '\\n' +\n  '      or on the command line via: npm <command> --key value\\n' +\n  '      Config info can be viewed via: npm help config';\n  console.log(helpInfo);\n  process.exit(0);\n};\n","/home/travis/build/npmtest/node-npmtest-cnpm/node_modules/cnpm/origin_npm.js":"'use strict';\n\nconst debug = require('debug')('cnpm:origin');\nconst match = require('auto-correct');\nconst spawn = require('cross-spawn');\nconst cp = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\nconst config = require('./config');\nconst parseArgv = require('./parse_argv');\n\nconst program = parseArgv();\nconst rawArgs = program.rawArgs.slice(2);\nconst args = [];\nlet isInstall = false;\nlet installer = 'npminstall';\n\nfor (let i = 0; i < rawArgs.length; i++) {\n  let arg = rawArgs[i];\n  if (arg[0] !== '-') {\n    arg = correct(arg);\n  }\n  if (i === 0 && (arg === 'i' || arg === 'install')) {\n    isInstall = true;\n    continue;\n  }\n\n  // support `$ cnpm i --by=npm`\n  if (arg.indexOf('--by=') === 0) {\n    installer = arg.split('=', 2)[1];\n    continue;\n  }\n\n  args.push(arg);\n}\n\nconst env = Object.assign({}, process.env);\nconst CWD = process.cwd();\n\nargs.unshift('--registry=' + program.registry);\nif (program.disturl) {\n  args.unshift('--disturl=' + program.disturl);\n}\nif (program.userconfig) {\n  args.unshift('--userconfig=' + program.userconfig);\n}\nif (program.proxy) {\n  args.unshift('--proxy=' + program.proxy);\n}\n\nlet npmBin;\nlet execMethod = spawn;\nconst stdio = [\n  process.stdin,\n  process.stdout,\n  process.stderr,\n];\n\nif (isInstall) {\n  npmBin = path.join(__dirname, 'node_modules', '.bin', installer);\n  if (installer === 'npminstall') {\n    // use fork to spawn can fix install cnpm itself fail on Windows\n    execMethod = cp.fork;\n    stdio.push('ipc');\n    npmBin = require.resolve('npminstall/bin/install.js');\n    args.unshift('--china');\n  } else {\n    // other installer, like npm\n    args.unshift('install');\n  }\n  // maybe outside installer, just use installer as binary name\n  if (!fs.existsSync(npmBin)) {\n    npmBin = installer;\n  }\n} else {\n  npmBin = path.join(__dirname, 'node_modules', '.bin', 'npm');\n}\n\ndebug('%s %s', npmBin, args.join(' '));\n\nconst child = execMethod(npmBin, args, {\n  env: env,\n  cwd: CWD,\n  stdio: stdio,\n});\n\nchild.on('exit', (code, signal) => {\n  process.exit(code);\n});\n\nfunction correct(command) {\n  const cmds = [\n    'install',\n    'publish',\n    'adduser',\n    'author',\n    'config',\n    'unpublish',\n  ];\n  for (const cmd of cmds) {\n    if (match(command, cmd)) {\n      return cmd;\n    }\n  }\n  return command;\n}\n","/home/travis/build/npmtest/node-npmtest-cnpm/node_modules/cnpm/parse_argv.js":"'use strict';\n\nconst os = require('os');\nconst fs = require('fs');\nconst program = require('commander');\nconst config = require('./config');\nconst pkg = require('./package.json');\nconst help = require('./help');\n\nlet argv = null;\n\nmodule.exports = cmd => {\n  if (!argv) {\n    argv = program\n      .option('-v, --version', 'show full versions')\n      .option('-r, --registry [registry]', 'registry url, default is ' + config.cnpmRegistry)\n      .option('-w, --registryweb [registryweb]', 'web url, default is ' + config.cnpmHost)\n      .option('--disturl [disturl]', 'dist url for node-gyp, default is ' + config.disturl)\n      .option('-c, --cache [cache]', 'cache folder, default is ' + config.cache)\n      .option('-u, --userconfig [userconfig]', 'userconfig file, default is ' + config.userconfig)\n      .option('-y, --yes', 'yes all confirm')\n      .option('--proxy [proxy]', 'set a http proxy, no default');\n  }\n\n  if (cmd === 'doc') {\n    argv.option('-g, --git', '[doc options] open git url');\n  } else if (cmd === 'sync') {\n    argv.option('--sync-publish', '[sync options] sync as publish')\n      .option('--no-deps', '[sync options] do not sync dependencies and devDependencies');\n  }\n\n  // commander's bug, fix here\n  // https://github.com/visionmedia/commander.js/pull/189\n  var cacheInfo;\n  argv.on('cache', function (cache) {\n    if (typeof cache === 'string') {\n      cacheInfo = cache;\n      return;\n    }\n    argv.args = ['cache'].concat(cache || []);\n  });\n\n  argv.on('version', function() {\n    console.log('cnpm@%s (%s)%snpm@%s (%s)%snode@%s (%s)%snpminstall@%s (%s)%sprefix=%s %s%s %s %s %sregistry=%s',\n      pkg.version,\n      __filename,\n      os.EOL,\n      require('npm/package.json').version,\n      require.resolve('npm'),\n      os.EOL,\n      process.version.substring(1),\n      process.execPath,\n      os.EOL,\n      require('npminstall/package.json').version,\n      require.resolve('npminstall'),\n      os.EOL,\n      config.prefix,\n      os.EOL,\n      os.platform(),\n      os.arch(),\n      os.release(),\n      os.EOL,\n      config.cnpmRegistry\n    );\n    process.exit(0);\n  });\n\n  // custom help message\n  // output command help, default options help info will output by default\n  argv.on('--help', function () {\n    if (!argv.registry) {\n      argv.userconfig = argv.userconfig || config.userconfig;\n      argv.registry = getDefaultRegistry(argv.userconfig);\n    }\n    help(argv);\n  });\n  argv.parse(process.argv.slice());\n\n  argv.userconfig = argv.userconfig || config.userconfig;\n  if (!argv.registry) {\n    // try to use registry in uerconfig\n    argv.registry = getDefaultRegistry(argv.userconfig);\n  }\n  if (!argv.disturl) {\n    var isIOJS = process.execPath.indexOf('iojs') >= 0;\n    argv.disturl = isIOJS ? config.iojsDisturl : config.disturl;\n  }\n  if (!argv.proxy) {\n    argv.proxy = config.proxy;\n  }\n  if (argv.disturl === 'none') {\n    delete argv.disturl;\n  }\n  if (argv.userconfig === 'none') {\n    delete argv.userconfig;\n  }\n  argv.registryweb = argv.registryweb || config.cnpmHost;\n  argv.cache = cacheInfo || config.cache;\n\n  if (!argv.args.length) {\n    help(argv);\n  }\n\n  // filter rawArgs\n  var rawArgs = argv.rawArgs;\n  var needs = [];\n  for (var i = 0; i < rawArgs.length; i++) {\n    var arg = rawArgs[i];\n    if (arg.indexOf('--userconfig=') === 0 || arg.indexOf('-u=') === 0) {\n      continue;\n    }\n    if (arg.indexOf('--disturl=') === 0) {\n      continue;\n    }\n    if (arg.indexOf('--registryweb=') === 0 || arg.indexOf('-w=') === 0) {\n      continue;\n    }\n    if (arg.indexOf('--registry=') === 0 || arg.indexOf('-r=') === 0) {\n      continue;\n    }\n    needs.push(arg);\n  }\n  argv.rawArgs = needs;\n\n  return argv;\n};\n\nfunction getDefaultRegistry(userconfig) {\n  if (argv.userconfig !== 'none' && fs.existsSync(argv.userconfig)) {\n    var content = fs.readFileSync(argv.userconfig, 'utf8');\n    // registry = {registry-url}\n    var m = /^registry\\s*=\\s*(.+)$/m.exec(content);\n    if (m) {\n      return m[1];\n    }\n  }\n  return config.cnpmRegistry;\n}\n","/home/travis/build/npmtest/node-npmtest-cnpm/node_modules/cnpm/utils.js":"'use strict';\n\n/*jshint -W079 */\nconst open = require('open');\n\nexports.openurl = function (url) {\n  open(url, function (err, stdout, stderr) {\n    if (err) {\n      console.log('Can not open browser, please open your browser to visit: ' + url);\n      process.exit(0);\n    }\n    if (stdout || stderr) {\n      console.log(stdout, stderr);\n    }\n    process.exit(0);\n  });\n};\n"}